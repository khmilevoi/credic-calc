{"version":3,"sources":["config.ts","shared/constants.ts","styles/calculator.styles.tsx","components/range.component.tsx","components/calculator.component.tsx","hooks/fetch-conditions.hook.ts","hooks/credit-calc.hook.ts","App.tsx","index.tsx"],"names":["config","defaultConditions","amount","min","max","limit","term","interestRate","RANGE","STEP","GlobalStyles","createGlobalStyle","AppContainer","styled","div","CalculatorContainer","CalculatorRangeWrapper","CalculatorResult","CalculatorResultLabel","span","CalculatorResultValue","RangeContainer","RangeLabel","RangeTitle","RangeSubtitle","RangeValue","RangeInfo","RangeInputContainer","RangeInfoLeft","RangeInfoRight","RangeInput","input","Range","value","step","onChange","title","subtitle","handleChange","useCallback","event","Number","parseFloat","currentTarget","type","Calculator","conditions","useState","setConditions","fetchConditions","a","axios","get","response","data","useEffect","then","useFetchConditions","setAmount","setTerm","result","useMemo","nextTerm","moment","add","num","useCreditCalc","format","Math","floor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAaA,EACI,2CCCJC,EAAsC,CACjDC,OAAQ,CAAEC,IAAK,EAAGC,IAAK,EAAGC,MAAO,GACjCC,KAAM,CAAEH,IAAK,EAAGC,IAAK,GACrBG,aAAc,GAGHC,EACH,CACNC,KAAM,I,izECRH,IAAMC,EAAeC,YAAH,KAYZC,EAAeC,IAAOC,IAAV,KAMZC,EAAsBF,IAAOC,IAAV,KAgBnBE,EAAyBH,IAAOC,IAAV,KAItBG,EAAmBJ,IAAOC,IAAV,KAUhBI,EAAwBL,IAAOM,KAAV,KAErBC,EAAwBP,IAAOM,KAAV,KAMrBE,EAAiBR,IAAOC,IAAV,KAedQ,EAAaT,IAAOC,IAAV,KAIVS,EAAaV,IAAOC,IAAV,KAWVU,EAAgBX,IAAOC,IAAV,KAKbW,EAAaZ,IAAOC,IAAV,KAIVY,EAAYb,IAAOC,IAAV,KAKTa,EAAsBd,IAAOC,IAAV,KASnBc,EAAgBf,IAAOC,IAAV,KACbe,EAAiBhB,IAAOC,IAAV,KAEdgB,GAAajB,IAAOkB,MAAV,KC1FVC,GAA6C,SAAC,GAQpD,IAPLC,EAOI,EAPJA,MACA7B,EAMI,EANJA,IACAD,EAKI,EALJA,IACA+B,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEMC,EAAeC,uBACnB,SAACC,GACCL,EAASM,OAAOC,WAAWF,EAAMG,cAAcV,UAEjD,CAACE,IAGH,OACE,eAACd,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAaa,IACb,cAACX,EAAD,UAAaQ,IACb,cAACT,EAAD,UAAgBa,OAGlB,eAACV,EAAD,WACE,eAACD,EAAD,WACE,cAACE,EAAD,UAAgBzB,IAChB,cAAC0B,EAAD,UAAiBzB,OAEnB,cAAC0B,GAAD,CACEc,KAAM,QACNxC,IAAKA,EACLD,IAAKA,EACL8B,MAAOA,EACPC,KAAMA,EACNC,SAAUG,WC9CPO,GAAa,WACxB,IAAMC,ECR0B,WAAO,IAAD,EACFC,mBAAS9C,GADP,mBAC/B6C,EAD+B,KACnBE,EADmB,KAGhCC,EAAkBV,sBAAW,sBAAC,8BAAAW,EAAA,sEACXC,IAAMC,IAAsBpD,GADjB,OAC5BqD,EAD4B,OAE1BC,EAASD,EAATC,KAERN,EAAcM,GAJoB,2CAKjC,IAMH,OAJAC,qBAAU,WACRN,IAAkBO,SACjB,CAACP,IAEGH,EDNYW,GADW,EETa,SAAC1B,GAAW,IAAD,EAC1BgB,mBAAShB,EAAM7B,OAAOG,OADI,mBAC/CH,EAD+C,KACvCwD,EADuC,OAE9BX,mBAAShB,EAAMzB,KAAKF,KAFU,mBAE/CE,EAF+C,KAEzCqD,EAFyC,KAItDJ,qBAAU,WACRG,EAAU3B,EAAM7B,OAAOG,OACvBsD,EAAQ5B,EAAMzB,KAAKF,OAClB,CAAC2B,IAEJ,IAAM6B,EAASC,mBAAQ,WACrB,OAAO3D,EAASA,EAAS6B,EAAMxB,aAAeD,IAC7C,CAACJ,EAAQ6B,EAAOzB,IAEbwD,EAAWD,mBAAQ,WACvB,OAAOE,MAASC,IAAI1D,EAAM,UACzB,CAACA,IAaJ,MAAO,CACLoD,UAZmBnB,uBACnB,SAAC0B,GACKA,EAAMlC,EAAM7B,OAAOG,MACrBqD,EAAU3B,EAAM7B,OAAOG,OAEvBqD,EAAUO,KAGd,CAAClC,IAKD7B,SACAyD,UACArD,OACAwD,WACAF,UFvB6DM,CAC7DpB,GADMa,EAFsB,EAEtBA,QAASD,EAFa,EAEbA,UAAWxD,EAFE,EAEFA,OAAQI,EAFN,EAEMA,KAAMsD,EAFZ,EAEYA,OAAQE,EAFpB,EAEoBA,SAIlD,OACE,eAAC/C,EAAD,WACE,eAACC,EAAD,WACE,cAAC,GAAD,CACEiB,MAAO/B,EACPE,IAAK0C,EAAW5C,OAAOE,IACvBD,IAAK2C,EAAW5C,OAAOC,IACvBgC,SAAUuB,EACVxB,KAAM1B,EAAaC,KACnB2B,MAAO,uDAET,cAAC,GAAD,CACEH,MAAO3B,EACPF,IAAK0C,EAAWxC,KAAKF,IACrBD,IAAK2C,EAAWxC,KAAKH,IACrBgC,SAAUwB,EACVzB,KAAM,EACNE,MAAO,qDACPC,SAAQ,uBAAQyB,EAASK,OAAO,uBAGpC,eAAClD,EAAD,WACE,cAACC,EAAD,sGACA,eAACE,EAAD,WAAwBgD,KAAKC,MAAMT,GAAnC,gCGtCKU,GAAM,WACjB,OACE,eAAC1D,EAAD,WACE,cAACF,EAAD,IAEA,cAAC,GAAD,QCLN6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcfe3f0a.chunk.js","sourcesContent":["export const config = {\n  conditionsApi: \"https://api.test.l-l.cloud/v2/conditions\",\n};\n","import { CreditConditions } from \"../types/logic.types\";\n\nexport const defaultConditions: CreditConditions = {\n  amount: { min: 0, max: 0, limit: 0 },\n  term: { min: 0, max: 0 },\n  interestRate: 0,\n};\n\nexport const RANGE = {\n  AMOUNT: {\n    STEP: 10,\n  },\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  html, body {\n    padding: 0;\n    margin: 0;\n    font-family: Arial, sans-serif;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport const AppContainer = styled.div`\n  display: flex;\n`;\n\n// calculator\n\nexport const CalculatorContainer = styled.div`\n  min-width: 730px;\n\n  padding: 12px 8px;\n  margin: 15px;\n\n  border-radius: 18px;\n\n  display: flex;\n  //justify-content: space-between;\n  flex-wrap: wrap;\n\n  background-color: #fff;\n  box-shadow: 0 6px 20px rgba(38, 153, 251, 0.2);\n`;\n\nexport const CalculatorRangeWrapper = styled.div`\n  display: flex;\n`;\n\nexport const CalculatorResult = styled.div`\n  width: 158px;\n\n  margin-left: 14px;\n  margin-top: 14px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CalculatorResultLabel = styled.span``;\n\nexport const CalculatorResultValue = styled.span`\n  font-size: 38px;\n`;\n\n// range\n\nexport const RangeContainer = styled.div`\n  width: 257px;\n\n  padding: 13px 6px 5px 6px;\n  margin: 0 10px;\n\n  border-radius: 18px;\n\n  box-shadow: 0 4px 15px rgba(26, 124, 206, 0.37);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const RangeLabel = styled.div`\n  padding: 0 10px;\n`;\n\nexport const RangeTitle = styled.div`\n  width: 100%;\n\n  margin-bottom: 4px;\n\n  display: flex;\n  justify-content: space-between;\n\n  white-space: nowrap;\n`;\n\nexport const RangeSubtitle = styled.div`\n  font-size: 15px;\n  color: #000000bf;\n`;\n\nexport const RangeValue = styled.div`\n  font-size: 38px;\n`;\n\nexport const RangeInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const RangeInputContainer = styled.div`\n  margin-top: 40px;\n\n  display: flex;\n  flex-direction: column;\n\n  font-size: 11px;\n`;\n\nexport const RangeInfoLeft = styled.div``;\nexport const RangeInfoRight = styled.div``;\n\nexport const RangeInput = styled.input`\n  width: 100%;\n`;\n","import React, { useCallback } from \"react\";\nimport {\n  RangeContainer,\n  RangeInfo,\n  RangeInfoLeft,\n  RangeInfoRight,\n  RangeInput,\n  RangeInputContainer,\n  RangeLabel,\n  RangeSubtitle,\n  RangeTitle,\n  RangeValue,\n} from \"../styles/calculator.styles\";\n\nexport type RangeProps = {\n  max: number;\n  min: number;\n  value: number;\n  step: number;\n  onChange: (num: number) => any;\n  title: string;\n  subtitle?: string;\n};\n\nexport const Range: React.FunctionComponent<RangeProps> = ({\n  value,\n  max,\n  min,\n  step,\n  onChange,\n  title,\n  subtitle,\n}) => {\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(Number.parseFloat(event.currentTarget.value));\n    },\n    [onChange]\n  );\n\n  return (\n    <RangeContainer>\n      <RangeLabel>\n        <RangeTitle>{title}</RangeTitle>\n        <RangeValue>{value}</RangeValue>\n        <RangeSubtitle>{subtitle}</RangeSubtitle>\n      </RangeLabel>\n\n      <RangeInputContainer>\n        <RangeInfo>\n          <RangeInfoLeft>{min}</RangeInfoLeft>\n          <RangeInfoRight>{max}</RangeInfoRight>\n        </RangeInfo>\n        <RangeInput\n          type={\"range\"}\n          max={max}\n          min={min}\n          value={value}\n          step={step}\n          onChange={handleChange}\n        />\n      </RangeInputContainer>\n    </RangeContainer>\n  );\n};\n","import React from \"react\";\nimport { useCreditCalc } from \"../hooks/credit-calc.hook\";\nimport { useFetchConditions } from \"../hooks/fetch-conditions.hook\";\nimport { RANGE } from \"../shared/constants\";\nimport {\n  CalculatorContainer,\n  CalculatorRangeWrapper,\n  CalculatorResult,\n  CalculatorResultLabel,\n  CalculatorResultValue,\n} from \"../styles/calculator.styles\";\nimport { Range } from \"./range.component\";\n\nexport const Calculator = () => {\n  const conditions = useFetchConditions();\n  const { setTerm, setAmount, amount, term, result, nextTerm } = useCreditCalc(\n    conditions\n  );\n\n  return (\n    <CalculatorContainer>\n      <CalculatorRangeWrapper>\n        <Range\n          value={amount}\n          max={conditions.amount.max}\n          min={conditions.amount.min}\n          onChange={setAmount}\n          step={RANGE.AMOUNT.STEP}\n          title={\"Сумма, грн\"}\n        />\n        <Range\n          value={term}\n          max={conditions.term.max}\n          min={conditions.term.min}\n          onChange={setTerm}\n          step={1}\n          title={\"Срок, дней\"}\n          subtitle={`До ${nextTerm.format(\"DD.MM.YYYY dd\")}`}\n        />\n      </CalculatorRangeWrapper>\n      <CalculatorResult>\n        <CalculatorResultLabel>Итого к возврату:</CalculatorResultLabel>\n        <CalculatorResultValue>{Math.floor(result)} грн</CalculatorResultValue>\n      </CalculatorResult>\n    </CalculatorContainer>\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { config } from \"../config\";\nimport { defaultConditions } from \"../shared/constants\";\nimport { CreditConditions } from \"../types/logic.types\";\n\nexport const useFetchConditions = () => {\n  const [conditions, setConditions] = useState(defaultConditions);\n\n  const fetchConditions = useCallback(async () => {\n    const response = await axios.get<CreditConditions>(config.conditionsApi);\n    const { data } = response;\n\n    setConditions(data);\n  }, []);\n\n  useEffect(() => {\n    fetchConditions().then();\n  }, [fetchConditions]);\n\n  return conditions;\n};\n","import moment from \"moment\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { CreditCalcHook } from \"../types/logic.types\";\n\nexport const useCreditCalc: CreditCalcHook = (input) => {\n  const [amount, setAmount] = useState(input.amount.limit);\n  const [term, setTerm] = useState(input.term.max);\n\n  useEffect(() => {\n    setAmount(input.amount.limit);\n    setTerm(input.term.max);\n  }, [input]);\n\n  const result = useMemo(() => {\n    return amount + amount * input.interestRate * term;\n  }, [amount, input, term]);\n\n  const nextTerm = useMemo(() => {\n    return moment().add(term, \"days\");\n  }, [term]);\n\n  const updateAmount = useCallback(\n    (num: number) => {\n      if (num > input.amount.limit) {\n        setAmount(input.amount.limit);\n      } else {\n        setAmount(num);\n      }\n    },\n    [input]\n  );\n\n  return {\n    setAmount: updateAmount,\n    amount,\n    setTerm,\n    term,\n    nextTerm,\n    result,\n  };\n};\n","import React from \"react\";\nimport { Calculator } from \"./components/calculator.component\";\nimport { GlobalStyles, AppContainer } from \"./styles/calculator.styles\";\n\nexport const App = () => {\n  return (\n    <AppContainer>\n      <GlobalStyles />\n\n      <Calculator />\n    </AppContainer>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}